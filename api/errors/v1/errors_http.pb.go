// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.30.2
// source: errors/v1/errors.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationErrorServiceCreateCustomError = "/errors.v1.ErrorService/CreateCustomError"
const OperationErrorServiceGetErrorInfo = "/errors.v1.ErrorService/GetErrorInfo"
const OperationErrorServiceListErrorCodes = "/errors.v1.ErrorService/ListErrorCodes"

type ErrorServiceHTTPServer interface {
	// CreateCustomError 创建自定义错误
	CreateCustomError(context.Context, *CreateCustomErrorRequest) (*CreateCustomErrorReply, error)
	// GetErrorInfo 获取错误信息
	GetErrorInfo(context.Context, *GetErrorInfoRequest) (*GetErrorInfoReply, error)
	// ListErrorCodes 获取所有错误码列表
	ListErrorCodes(context.Context, *ListErrorCodesRequest) (*ListErrorCodesReply, error)
}

func RegisterErrorServiceHTTPServer(s *http.Server, srv ErrorServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/errors/{error_code}", _ErrorService_GetErrorInfo0_HTTP_Handler(srv))
	r.GET("/errors", _ErrorService_ListErrorCodes0_HTTP_Handler(srv))
	r.POST("/errors/custom", _ErrorService_CreateCustomError0_HTTP_Handler(srv))
}

func _ErrorService_GetErrorInfo0_HTTP_Handler(srv ErrorServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetErrorInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationErrorServiceGetErrorInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetErrorInfo(ctx, req.(*GetErrorInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetErrorInfoReply)
		return ctx.Result(200, reply)
	}
}

func _ErrorService_ListErrorCodes0_HTTP_Handler(srv ErrorServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListErrorCodesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationErrorServiceListErrorCodes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListErrorCodes(ctx, req.(*ListErrorCodesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListErrorCodesReply)
		return ctx.Result(200, reply)
	}
}

func _ErrorService_CreateCustomError0_HTTP_Handler(srv ErrorServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCustomErrorRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationErrorServiceCreateCustomError)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCustomError(ctx, req.(*CreateCustomErrorRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCustomErrorReply)
		return ctx.Result(200, reply)
	}
}

type ErrorServiceHTTPClient interface {
	CreateCustomError(ctx context.Context, req *CreateCustomErrorRequest, opts ...http.CallOption) (rsp *CreateCustomErrorReply, err error)
	GetErrorInfo(ctx context.Context, req *GetErrorInfoRequest, opts ...http.CallOption) (rsp *GetErrorInfoReply, err error)
	ListErrorCodes(ctx context.Context, req *ListErrorCodesRequest, opts ...http.CallOption) (rsp *ListErrorCodesReply, err error)
}

type ErrorServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewErrorServiceHTTPClient(client *http.Client) ErrorServiceHTTPClient {
	return &ErrorServiceHTTPClientImpl{client}
}

func (c *ErrorServiceHTTPClientImpl) CreateCustomError(ctx context.Context, in *CreateCustomErrorRequest, opts ...http.CallOption) (*CreateCustomErrorReply, error) {
	var out CreateCustomErrorReply
	pattern := "/errors/custom"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationErrorServiceCreateCustomError))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ErrorServiceHTTPClientImpl) GetErrorInfo(ctx context.Context, in *GetErrorInfoRequest, opts ...http.CallOption) (*GetErrorInfoReply, error) {
	var out GetErrorInfoReply
	pattern := "/errors/{error_code}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationErrorServiceGetErrorInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ErrorServiceHTTPClientImpl) ListErrorCodes(ctx context.Context, in *ListErrorCodesRequest, opts ...http.CallOption) (*ListErrorCodesReply, error) {
	var out ListErrorCodesReply
	pattern := "/errors"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationErrorServiceListErrorCodes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

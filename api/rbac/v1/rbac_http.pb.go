// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.30.2
// source: rbac/v1/rbac.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRBACServiceAssignRolePermission = "/api.rbac.v1.RBACService/AssignRolePermission"
const OperationRBACServiceAssignUserRole = "/api.rbac.v1.RBACService/AssignUserRole"
const OperationRBACServiceCheckPermission = "/api.rbac.v1.RBACService/CheckPermission"
const OperationRBACServiceCreatePermission = "/api.rbac.v1.RBACService/CreatePermission"
const OperationRBACServiceCreateRole = "/api.rbac.v1.RBACService/CreateRole"
const OperationRBACServiceDeletePermission = "/api.rbac.v1.RBACService/DeletePermission"
const OperationRBACServiceDeleteRole = "/api.rbac.v1.RBACService/DeleteRole"
const OperationRBACServiceGetPermission = "/api.rbac.v1.RBACService/GetPermission"
const OperationRBACServiceGetRole = "/api.rbac.v1.RBACService/GetRole"
const OperationRBACServiceGetRolePermissions = "/api.rbac.v1.RBACService/GetRolePermissions"
const OperationRBACServiceGetUserRoles = "/api.rbac.v1.RBACService/GetUserRoles"
const OperationRBACServiceListPermissions = "/api.rbac.v1.RBACService/ListPermissions"
const OperationRBACServiceListRoles = "/api.rbac.v1.RBACService/ListRoles"
const OperationRBACServiceRemoveRolePermission = "/api.rbac.v1.RBACService/RemoveRolePermission"
const OperationRBACServiceRemoveUserRole = "/api.rbac.v1.RBACService/RemoveUserRole"
const OperationRBACServiceUpdatePermission = "/api.rbac.v1.RBACService/UpdatePermission"
const OperationRBACServiceUpdateRole = "/api.rbac.v1.RBACService/UpdateRole"

type RBACServiceHTTPServer interface {
	AssignRolePermission(context.Context, *AssignRolePermissionRequest) (*AssignRolePermissionResponse, error)
	AssignUserRole(context.Context, *AssignUserRoleRequest) (*AssignUserRoleResponse, error)
	// CheckPermission 权限检查
	CheckPermission(context.Context, *CheckPermissionRequest) (*CheckPermissionResponse, error)
	CreatePermission(context.Context, *CreatePermissionRequest) (*CreatePermissionResponse, error)
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	DeletePermission(context.Context, *DeletePermissionRequest) (*DeletePermissionResponse, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	// GetPermission 权限管理
	GetPermission(context.Context, *GetPermissionRequest) (*GetPermissionResponse, error)
	// GetRole 角色管理
	GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
	// GetRolePermissions 角色权限管理
	GetRolePermissions(context.Context, *GetRolePermissionsRequest) (*GetRolePermissionsResponse, error)
	// GetUserRoles 用户角色管理
	GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error)
	ListPermissions(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error)
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	RemoveRolePermission(context.Context, *RemoveRolePermissionRequest) (*RemoveRolePermissionResponse, error)
	RemoveUserRole(context.Context, *RemoveUserRoleRequest) (*RemoveUserRoleResponse, error)
	UpdatePermission(context.Context, *UpdatePermissionRequest) (*UpdatePermissionResponse, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
}

func RegisterRBACServiceHTTPServer(s *http.Server, srv RBACServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/roles/{id}", _RBACService_GetRole0_HTTP_Handler(srv))
	r.POST("/api/v1/roles", _RBACService_CreateRole0_HTTP_Handler(srv))
	r.PUT("/api/v1/roles/{id}", _RBACService_UpdateRole0_HTTP_Handler(srv))
	r.DELETE("/api/v1/roles/{id}", _RBACService_DeleteRole0_HTTP_Handler(srv))
	r.GET("/api/v1/roles", _RBACService_ListRoles0_HTTP_Handler(srv))
	r.GET("/api/v1/permissions/{id}", _RBACService_GetPermission0_HTTP_Handler(srv))
	r.POST("/api/v1/permissions", _RBACService_CreatePermission0_HTTP_Handler(srv))
	r.PUT("/api/v1/permissions/{id}", _RBACService_UpdatePermission0_HTTP_Handler(srv))
	r.DELETE("/api/v1/permissions/{id}", _RBACService_DeletePermission0_HTTP_Handler(srv))
	r.GET("/api/v1/permissions", _RBACService_ListPermissions0_HTTP_Handler(srv))
	r.GET("/api/v1/users/{user_id}/roles", _RBACService_GetUserRoles0_HTTP_Handler(srv))
	r.POST("/api/v1/users/{user_id}/roles", _RBACService_AssignUserRole0_HTTP_Handler(srv))
	r.DELETE("/api/v1/users/{user_id}/roles/{role_id}", _RBACService_RemoveUserRole0_HTTP_Handler(srv))
	r.GET("/api/v1/roles/{role_id}/permissions", _RBACService_GetRolePermissions0_HTTP_Handler(srv))
	r.POST("/api/v1/roles/{role_id}/permissions", _RBACService_AssignRolePermission0_HTTP_Handler(srv))
	r.DELETE("/api/v1/roles/{role_id}/permissions/{permission_id}", _RBACService_RemoveRolePermission0_HTTP_Handler(srv))
	r.POST("/api/v1/permissions/check", _RBACService_CheckPermission0_HTTP_Handler(srv))
}

func _RBACService_GetRole0_HTTP_Handler(srv RBACServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRBACServiceGetRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRole(ctx, req.(*GetRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _RBACService_CreateRole0_HTTP_Handler(srv RBACServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRBACServiceCreateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRole(ctx, req.(*CreateRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _RBACService_UpdateRole0_HTTP_Handler(srv RBACServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRBACServiceUpdateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRole(ctx, req.(*UpdateRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _RBACService_DeleteRole0_HTTP_Handler(srv RBACServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRBACServiceDeleteRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRole(ctx, req.(*DeleteRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _RBACService_ListRoles0_HTTP_Handler(srv RBACServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRolesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRBACServiceListRoles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRoles(ctx, req.(*ListRolesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRolesResponse)
		return ctx.Result(200, reply)
	}
}

func _RBACService_GetPermission0_HTTP_Handler(srv RBACServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPermissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRBACServiceGetPermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPermission(ctx, req.(*GetPermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPermissionResponse)
		return ctx.Result(200, reply)
	}
}

func _RBACService_CreatePermission0_HTTP_Handler(srv RBACServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePermissionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRBACServiceCreatePermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePermission(ctx, req.(*CreatePermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePermissionResponse)
		return ctx.Result(200, reply)
	}
}

func _RBACService_UpdatePermission0_HTTP_Handler(srv RBACServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePermissionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRBACServiceUpdatePermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePermission(ctx, req.(*UpdatePermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePermissionResponse)
		return ctx.Result(200, reply)
	}
}

func _RBACService_DeletePermission0_HTTP_Handler(srv RBACServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePermissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRBACServiceDeletePermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePermission(ctx, req.(*DeletePermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePermissionResponse)
		return ctx.Result(200, reply)
	}
}

func _RBACService_ListPermissions0_HTTP_Handler(srv RBACServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPermissionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRBACServiceListPermissions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPermissions(ctx, req.(*ListPermissionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPermissionsResponse)
		return ctx.Result(200, reply)
	}
}

func _RBACService_GetUserRoles0_HTTP_Handler(srv RBACServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserRolesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRBACServiceGetUserRoles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserRoles(ctx, req.(*GetUserRolesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserRolesResponse)
		return ctx.Result(200, reply)
	}
}

func _RBACService_AssignUserRole0_HTTP_Handler(srv RBACServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AssignUserRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRBACServiceAssignUserRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AssignUserRole(ctx, req.(*AssignUserRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AssignUserRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _RBACService_RemoveUserRole0_HTTP_Handler(srv RBACServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RemoveUserRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRBACServiceRemoveUserRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemoveUserRole(ctx, req.(*RemoveUserRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RemoveUserRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _RBACService_GetRolePermissions0_HTTP_Handler(srv RBACServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRolePermissionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRBACServiceGetRolePermissions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRolePermissions(ctx, req.(*GetRolePermissionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRolePermissionsResponse)
		return ctx.Result(200, reply)
	}
}

func _RBACService_AssignRolePermission0_HTTP_Handler(srv RBACServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AssignRolePermissionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRBACServiceAssignRolePermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AssignRolePermission(ctx, req.(*AssignRolePermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AssignRolePermissionResponse)
		return ctx.Result(200, reply)
	}
}

func _RBACService_RemoveRolePermission0_HTTP_Handler(srv RBACServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RemoveRolePermissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRBACServiceRemoveRolePermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemoveRolePermission(ctx, req.(*RemoveRolePermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RemoveRolePermissionResponse)
		return ctx.Result(200, reply)
	}
}

func _RBACService_CheckPermission0_HTTP_Handler(srv RBACServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckPermissionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRBACServiceCheckPermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckPermission(ctx, req.(*CheckPermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckPermissionResponse)
		return ctx.Result(200, reply)
	}
}

type RBACServiceHTTPClient interface {
	AssignRolePermission(ctx context.Context, req *AssignRolePermissionRequest, opts ...http.CallOption) (rsp *AssignRolePermissionResponse, err error)
	AssignUserRole(ctx context.Context, req *AssignUserRoleRequest, opts ...http.CallOption) (rsp *AssignUserRoleResponse, err error)
	CheckPermission(ctx context.Context, req *CheckPermissionRequest, opts ...http.CallOption) (rsp *CheckPermissionResponse, err error)
	CreatePermission(ctx context.Context, req *CreatePermissionRequest, opts ...http.CallOption) (rsp *CreatePermissionResponse, err error)
	CreateRole(ctx context.Context, req *CreateRoleRequest, opts ...http.CallOption) (rsp *CreateRoleResponse, err error)
	DeletePermission(ctx context.Context, req *DeletePermissionRequest, opts ...http.CallOption) (rsp *DeletePermissionResponse, err error)
	DeleteRole(ctx context.Context, req *DeleteRoleRequest, opts ...http.CallOption) (rsp *DeleteRoleResponse, err error)
	GetPermission(ctx context.Context, req *GetPermissionRequest, opts ...http.CallOption) (rsp *GetPermissionResponse, err error)
	GetRole(ctx context.Context, req *GetRoleRequest, opts ...http.CallOption) (rsp *GetRoleResponse, err error)
	GetRolePermissions(ctx context.Context, req *GetRolePermissionsRequest, opts ...http.CallOption) (rsp *GetRolePermissionsResponse, err error)
	GetUserRoles(ctx context.Context, req *GetUserRolesRequest, opts ...http.CallOption) (rsp *GetUserRolesResponse, err error)
	ListPermissions(ctx context.Context, req *ListPermissionsRequest, opts ...http.CallOption) (rsp *ListPermissionsResponse, err error)
	ListRoles(ctx context.Context, req *ListRolesRequest, opts ...http.CallOption) (rsp *ListRolesResponse, err error)
	RemoveRolePermission(ctx context.Context, req *RemoveRolePermissionRequest, opts ...http.CallOption) (rsp *RemoveRolePermissionResponse, err error)
	RemoveUserRole(ctx context.Context, req *RemoveUserRoleRequest, opts ...http.CallOption) (rsp *RemoveUserRoleResponse, err error)
	UpdatePermission(ctx context.Context, req *UpdatePermissionRequest, opts ...http.CallOption) (rsp *UpdatePermissionResponse, err error)
	UpdateRole(ctx context.Context, req *UpdateRoleRequest, opts ...http.CallOption) (rsp *UpdateRoleResponse, err error)
}

type RBACServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewRBACServiceHTTPClient(client *http.Client) RBACServiceHTTPClient {
	return &RBACServiceHTTPClientImpl{client}
}

func (c *RBACServiceHTTPClientImpl) AssignRolePermission(ctx context.Context, in *AssignRolePermissionRequest, opts ...http.CallOption) (*AssignRolePermissionResponse, error) {
	var out AssignRolePermissionResponse
	pattern := "/api/v1/roles/{role_id}/permissions"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRBACServiceAssignRolePermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RBACServiceHTTPClientImpl) AssignUserRole(ctx context.Context, in *AssignUserRoleRequest, opts ...http.CallOption) (*AssignUserRoleResponse, error) {
	var out AssignUserRoleResponse
	pattern := "/api/v1/users/{user_id}/roles"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRBACServiceAssignUserRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RBACServiceHTTPClientImpl) CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...http.CallOption) (*CheckPermissionResponse, error) {
	var out CheckPermissionResponse
	pattern := "/api/v1/permissions/check"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRBACServiceCheckPermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RBACServiceHTTPClientImpl) CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...http.CallOption) (*CreatePermissionResponse, error) {
	var out CreatePermissionResponse
	pattern := "/api/v1/permissions"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRBACServiceCreatePermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RBACServiceHTTPClientImpl) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...http.CallOption) (*CreateRoleResponse, error) {
	var out CreateRoleResponse
	pattern := "/api/v1/roles"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRBACServiceCreateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RBACServiceHTTPClientImpl) DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...http.CallOption) (*DeletePermissionResponse, error) {
	var out DeletePermissionResponse
	pattern := "/api/v1/permissions/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRBACServiceDeletePermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RBACServiceHTTPClientImpl) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...http.CallOption) (*DeleteRoleResponse, error) {
	var out DeleteRoleResponse
	pattern := "/api/v1/roles/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRBACServiceDeleteRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RBACServiceHTTPClientImpl) GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...http.CallOption) (*GetPermissionResponse, error) {
	var out GetPermissionResponse
	pattern := "/api/v1/permissions/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRBACServiceGetPermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RBACServiceHTTPClientImpl) GetRole(ctx context.Context, in *GetRoleRequest, opts ...http.CallOption) (*GetRoleResponse, error) {
	var out GetRoleResponse
	pattern := "/api/v1/roles/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRBACServiceGetRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RBACServiceHTTPClientImpl) GetRolePermissions(ctx context.Context, in *GetRolePermissionsRequest, opts ...http.CallOption) (*GetRolePermissionsResponse, error) {
	var out GetRolePermissionsResponse
	pattern := "/api/v1/roles/{role_id}/permissions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRBACServiceGetRolePermissions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RBACServiceHTTPClientImpl) GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...http.CallOption) (*GetUserRolesResponse, error) {
	var out GetUserRolesResponse
	pattern := "/api/v1/users/{user_id}/roles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRBACServiceGetUserRoles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RBACServiceHTTPClientImpl) ListPermissions(ctx context.Context, in *ListPermissionsRequest, opts ...http.CallOption) (*ListPermissionsResponse, error) {
	var out ListPermissionsResponse
	pattern := "/api/v1/permissions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRBACServiceListPermissions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RBACServiceHTTPClientImpl) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...http.CallOption) (*ListRolesResponse, error) {
	var out ListRolesResponse
	pattern := "/api/v1/roles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRBACServiceListRoles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RBACServiceHTTPClientImpl) RemoveRolePermission(ctx context.Context, in *RemoveRolePermissionRequest, opts ...http.CallOption) (*RemoveRolePermissionResponse, error) {
	var out RemoveRolePermissionResponse
	pattern := "/api/v1/roles/{role_id}/permissions/{permission_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRBACServiceRemoveRolePermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RBACServiceHTTPClientImpl) RemoveUserRole(ctx context.Context, in *RemoveUserRoleRequest, opts ...http.CallOption) (*RemoveUserRoleResponse, error) {
	var out RemoveUserRoleResponse
	pattern := "/api/v1/users/{user_id}/roles/{role_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRBACServiceRemoveUserRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RBACServiceHTTPClientImpl) UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...http.CallOption) (*UpdatePermissionResponse, error) {
	var out UpdatePermissionResponse
	pattern := "/api/v1/permissions/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRBACServiceUpdatePermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RBACServiceHTTPClientImpl) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...http.CallOption) (*UpdateRoleResponse, error) {
	var out UpdateRoleResponse
	pattern := "/api/v1/roles/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRBACServiceUpdateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

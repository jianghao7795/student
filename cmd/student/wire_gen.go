// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"student/internal/biz"
	"student/internal/conf"
	"student/internal/data"
	"student/internal/pkg/jwt"
	"student/internal/server"
	"student/internal/service"

	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"

	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, logger log.Logger) (*kratos.App, func(), error) {
	db, err := data.NewGormDB(bootstrap)
	if err != nil {
		return nil, nil, err
	}
	client, err := data.NewRedis(bootstrap)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(logger, db, client)
	if err != nil {
		return nil, nil, err
	}
	studentRepo := data.NewStudentRepo(dataData, logger)
	studentUsecase := biz.NewStudentUsecase(studentRepo, logger)
	studentService := service.NewStudentService(studentUsecase, logger)
	userRepo := data.NewUserRepo(dataData, logger)
	string2 := data.NewRBACModelPath(bootstrap)
	rbacRepo := data.NewRBACRepo(dataData, logger, string2)
	rbac := data.NewRBACConfig(bootstrap)
	rbacUsecase := biz.NewRBACUsecase(rbacRepo, logger, rbac)
	config := data.NewJWTConfig(bootstrap)
	jwtUtil := jwt.NewJWTUtil(config)
	userUsecase := biz.NewUserUsecase(userRepo, rbacUsecase, jwtUtil, logger)
	userService := service.NewUserService(userUsecase, logger)
	errorRepo := data.NewErrorRepo(dataData, logger)
	errorUsecase := biz.NewErrorUsecase(errorRepo, logger)
	errorService := service.NewErrorService(errorUsecase, logger)
	grpcServer := server.NewGRPCServer(bootstrap, studentService, userService, rbacUsecase, jwtUtil, logger)
	rbacService := service.NewRBACService(rbacUsecase, logger)
	httpServer := server.NewHTTPServer(bootstrap, studentService, userService, rbacService, errorService, rbacUsecase, jwtUtil, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
